vue create vuelearn
yarn serve

### BINDING ONE WAY ###
to display variable data in HTML, add ":" behind the attribute
Exemple:

<input type="text" :value="name"> 

<script>
export default {
    data(){
        return{
            name: "Heyyyyy",
        }
    }
}
</script>

the value of input will be set "Heyyyy"

################

###### BINDING TWO WAY ######


replace the attribute to '' v-model '' to apply binding two WAY

<input type="text" v-model="name">
<p>{{name}}</p>

<script>
export default {
    data(){
        return{
            name: "Heyyeyeyeyeye tati tati",
        }
    }
}
</script>

############### PROPS ###########
the data will be sent through the props to the child container

<template>
  <div id="app">
    <h1>Guia Clientes</h1>
    <input type="text" v-model="user.name"/>
    <Cliente :client="user"/>
    <Cliente :client="user"/>
    <Cliente :client="user"/>
  </div>
</template>

<script>
import Cliente from './components/Cliente';
//import Produto from './components/Produto';
export default {
  data(){
    return{
      nomeDoVictor: "Victor Limaa",
      user:{
        name: "Victor",
        number:"(22)5129219",
        email:"aiaipapito@gmail.com",
        age:12,
        description:"eita maluco doideira"
      }
    }
  },
  name: 'App',
  components: {
    Cliente,
    //Produto
  }

}
</script>


THE CHILD 

<template>
    <div id="cliente">
        <h4>Name: {{client.name}}</h4>
        <p>Description: {{client.description}}</p>
        <p>Number: {{client.number}}</p>
        <p>Email: {{client.email}}</p>
        <p>Age: {{client.age}}</p>
    </div>
    
</template>

<script>
export default {
    props: {
        client:Object
    }
}
</script>

#####################

for the value to be seen as int or boolean, you must bind the property
ex: :showAge="true"
showAge receives boolean data
it is necessary to bind the attribute so that the date is not recognized as a string



        <p v-if="showAge == true">Age: {{client.age}}</p>
        <p v-else-if="showAge == false"></p>
        <p v-else> O usuário não tem idade, é doido</p>

<p v-show="showAge == true> v-show is the same as v-if, however, v-show is in html, 
while v-if is deleted </p>

###########################

conditional in class

<div :class="{'client': !isPremium, 'client-premium': isPremium}">

    data(){
        return{
            isPremium: true
        }
    },

#########################

v-for 

   <div v-for="user in users" :key="user.id">
      <Cliente :client="user"/>
    </div>

  data(){
    return{
      users:[
        {
          id:1,

          name: "Leonardo",
          number:"(55)959219",
          email:"aiaigsagsaqe@gmail.com",
          age:20,
          description:"arroz doce"
        },
        {
          id:3,
          name: "Tiktok",
          number:"(20)5129219",
          email:"attttttt@gmail.com",
          age:30,
          description:"juvenal"
        },
        {
          id:10,
          name: "Vfsafastor",
          number:"(22)5114219",
          email:"aiairqwrwqpito@gmail.com",
          age:42,
          description:"TATIANE MEU AMOR"
        }
      ]
    }

######################################

EVENTS

  <button @click="userRegister">Cadastrar</button>

      methods:{
        changeColor: function($event){
            console.log($event); 
            this.isPremium = !this.isPremium;
        }
    }


    Flow:
    The child component named ''Cliente'': 
    <button @click="sendDeleteEvent()">Deletar</button>

    sendDeleteEvent: function(){
        console.log("Emitindo do filho");
        this.$emit("meDelete", {userId:this.client.id, component: this});
    },

  The father component:
  <Cliente :client="user" @meDelete="deleteUser($event)"/>
  
  deleteUser: function($event){
    console.log("Recebendo evento!");
    var id = $event.userId;
    var newArray = this.users.filter(user => user.id != id); //if user.id is the same than id, he will be removed from the array
    this.users = newArray;
  }

  ############################ FILTERS ########

      <p>Email: {{client.email | processEmail()}}</p>


      filters:{
        processEmail: function(value){
            return value.toUpperCase();
        }
    }

    ###################### COMPUTED PROPERTIES #############

  it's a method that will return a value
      computed:{
        idSpecial: function (){
            return (this.cliente.name + this.client.email).toUpperCase();
        }
    }